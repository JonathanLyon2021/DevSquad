//SPDX-License-Identifier: MIT
pragma solidity 0.8.0;



contract storage2 {
    mapping(uint256 => address) public _numberToAddress;
    mapping(address => mapping(uint256 => string)) public _addressToOwnerName;
    uint256 internal number = 100;

    modifier validAddress(address _address) {
        require(_address != address(0), "Cannot be zero address");
        _;
    }
    
     function setName(uint256 num, address _address) public {
        _numberToAddress[num] = _address;
    }
    //(uint256,[key]) from line 7 is [num] on line 17. (address,[value] on line 7 is _address on line 17
    
    function name(uint256 num, address _address) public {
        setName(num, _address);
    }
    function setOwner(address _address, uint256 _index, string memory _name) 
    public 
    validAddress(_address)
    {
        _addressToOwnerName[_address][_index] = _name;
    }

}
